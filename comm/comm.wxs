function formatNullable(data,defaultValue) {
  if(data == null){
    return defaultValue
  }
  return data
}

function formatDate(timeStamp){
  if(!timeStamp){
    return "";
  }
  var time = getDate(timeStamp);
  var month = time.getMonth() + 1
  return time.getFullYear() + "/" + (month <= 10 ? '0' + month : month) + "/" + time.getDate()
}



/**
* 时间戳转化为年 月 日 时 分 秒
* number: 传入时间戳
* format：返回格式，支持自定义，但参数必须与formateArr里保持一致
* yyyy-MM-dd
*/
function formatTimeFav(number, format) {

  var formateArr = ['Y', 'M', 'D', 'h', 'm', 's'];
  var returnArr = [];

  var date = getDate(number * 1000);
  returnArr.push(date.getFullYear());
  returnArr.push(formatNumber(date.getMonth() + 1));
  returnArr.push(formatNumber(date.getDate()));

  returnArr.push(formatNumber(date.getHours()));
  returnArr.push(formatNumber(date.getMinutes()));
  returnArr.push(formatNumber(date.getSeconds()));

  for (var i=0;i<returnArr.length;i++) {
    format = format.replace(formateArr[i], returnArr[i]);
  }
  return format;
}



function formatNumber(n) {
  n = n.toString()
  return n[1] ? n : '0' + n
}




//将时间戳转换为几分钟前、几小时前
function timeAgo(dateTimeStamp, format) {	//这里融合了上面的自定义时间格式，“format”就是干这个用的
  // dateTimeStamp是一个时间毫秒，注意时间戳是秒的形式，在这个毫秒的基础上除以1000，就是十位数的时间戳。13位数的都是时间毫秒。
  var minute = 1000 * 60;      //把分，时，天，周，半个月，一个月用毫秒表示
  var hour = minute * 60;
  var day = hour * 24;
  var week = day * 7;
  var halfamonth = day * 15;
  var month = day * 30;

  var now = getDate();   //获取当前时间毫秒
  var diffValue = now - dateTimeStamp;//时间差

  if (diffValue < 0) { return; }

  var minC = diffValue / minute;  /*计算时间差的分，时，天，周，月*/
  var hourC = diffValue / hour;
  var dayC = diffValue / day;
  var weekC = diffValue / week;
  var monthC = diffValue / month;
  var result = '';

  // if (monthC >= 1) {
  //   result = "" + parseInt(monthC) + "月前";
  // } else if (weekC >= 1) {
  //   result = "" + parseInt(weekC) + "周前";
  // } else 
  if (dayC >= 1 && dayC <= 3) {
    result = "" + parseInt(dayC) + "天前";
  } else if (hourC >= 1 && hourC <= 24) {
    result = "" + parseInt(hourC) + "小时前";
  } else if (minC >= 1 && minC <= 60) {
    result = "" + parseInt(minC) + "分钟前";
  } else if (minC < 1) {
    result = "刚刚";
  } else
    result = formatTimeFav(dateTimeStamp / 1000, format)		/*否则输出“format”(自定义格式)的时间*/
  return result;
}




function isEmpty(obj) {
  console.log(obj)
  if (typeof obj == "undefined" || obj == null || obj === "") {
    return true;
  } else {
    return false;
  }
}

function checkAvatar(obj) {
  console.log(obj)
  if (typeof obj == "undefined" || obj == null || obj === "" || obj === "http://www.ichong123.com/") {
    return "/image/ic_no_avatar.png";
  } else {
    return obj;
  }
}

function getAge(time){
  var cDate = getDate();
  var cYear = cDate.getFullYear();

  var date = getDate(time);
  var year = date.getFullYear();
  return cYear - year;
}

function getConstellation(time){
  var d = getDate(time);
  var month = d.getMonth() + 1;
  var date = d.getDate();
  var value = "";

  if (month == 1 && date >=20 || month == 2 && date <=18) {value = "水瓶座";}
  if (month == 2 && date >=19 || month == 3 && date <=20) {value = "双鱼座";}
  if (month == 3 && date >=21 || month == 4 && date <=19) {value = "白羊座";}
  if (month == 4 && date >=20 || month == 5 && date <=20) {value = "金牛座";}
  if (month == 5 && date >=21 || month == 6 && date <=21) {value = "双子座";}
  if (month == 6 && date >=22 || month == 7 && date <=22) {value = "巨蟹座";}
  if (month == 7 && date >=23 || month == 8 && date <=22) {value = "狮子座";}
  if (month == 8 && date >=23 || month == 9 && date <=22) {value = "室女座";}
  if (month == 9 && date >=23 || month == 10 && date <=22) {value = "天秤座";}
  if (month == 10 && date >=23 || month == 11 && date <=21) {value = "天蝎座";}
  if (month == 11 && date >=22 || month == 12 && date <=21) {value = "人马座";}
  if (month == 12 && date >=22 || month == 1 && date <=19) {value = "摩羯座";}

  return value;
}

module.exports = {
  formatNullable: formatNullable,
  formatDate: formatDate,
  timeAgo: timeAgo,
  isEmpty: isEmpty,
  checkAvatar: checkAvatar,
  getAge: getAge,
  getConstellation: getConstellation

}